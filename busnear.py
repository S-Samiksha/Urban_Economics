    "import pandas as pd\n",
    "import ast\n",
    "#f = open(\"./busstopv2.txt\", \"r\")\n",
    "#pd.read_csv(pd.compat.StringIO(\"\\n\".join(lines)), sep=\";\")"
    "with open(\"busstopv2.txt\", \"r\") as grilled_cheese:\n",
    "    lines = grilled_cheese.readlines()\n",
    "    i=0\n",
    "    collector = []\n",
    "    for item in lines:\n",
    "        if i < 1000:\n",
    "            collector.append(ast.literal_eval(item))\n",
    "            #df = dict(item)\n",
    "            #print(df)\n",
    "            #print(type(df))\n",
    "            i+=1\n",
    "    print(len(collector))   \n",
    "    #dictlines = dict(lines)\n",
    "    #print(dictlines[\"value\"])"

    "i=2\n",
    "df = pd.DataFrame(collector[i]['value'],index=[i for i in range(len(collector[1]['value']))])\n",
    "print(df)"
	
	"import openpyxl\n",
    "dfs = []\n",
    "for i in range(len(collector)):\n",
    "    dfs.append(pd.DataFrame(collector[i]['value'],index=[i for i in range(len(collector[i]['value']))]))\n",
    "print(f\"Done with appending {i} DataFrames\")\n",
    "for i in range(len(collector)):\n",
    "    #pass\n",
    "    print(f\"Dataframe {i+1}:\\n\")\n",
    "    print(dfs[i])\n",
    "    \n",
    "overall = pd.concat(dfs,axis=0)\n",
    "print(\"Overall DataFrame:\")\n",
    "print(overall.shape)\n"

    "### Now that DataFrame is successfully created, output into Excel spreadsheet:"
    "from openpyxl.utils.dataframe import dataframe_to_rows\n",
    "from openpyxl import Workbook\n",
    "wb = Workbook()\n",
    "ws = wb.active\n",
    "\n",
    "# For each row in DataFrame\n",
    "for r in dataframe_to_rows(overall, index=True, header=True):\n",
    "    ws.append(r)\n",
    "\n",
    "for cell in ws['A'] + ws[1]:\n",
    "    cell.style = 'Pandas'\n",
    "\n",
    "#wb.save(\"busstop_overall.xlsx\")"

    "### Proceed to compare distance from HDB to each bus stop.\n",
    "Load all HDB data first:"

    "allhdb = pd.read_excel(\"./hdb_to_mrt_all.xlsx\", index_col=0,engine='openpyxl') #import fresh data  \n",
    "global blocks\n",
    "blocks = allhdb[['postal','lng_hdb','lat_hdb']].drop_duplicates()"

    "# Find relevant long and lat for HDB (do not mix up with MRT)\n",
    "print(\"Blocks DataFrame has shape:\",blocks.shape)\n",
    "\n",
    "#print(blocks)\n"

    "#blocks = blocks[blocks['postal']=='650383']\n"

    "def distance(long1,lat1,long2,lat2):\n",
    "    # 1 deg = 111000m\n",
    "    dist = 111000*((long2-long1)**2 +(lat2-lat1)**2)**0.5\n",
    "    return dist\n",
    "\n",
    "def all_distance(flist, overall):\n",
    "    '''Returns closest bus stop from each HDB block in Singapore'''\n",
    "    # For each block\n",
    "    all_dist = {}\n",
    "    min_dist = {}\n",
    "    alldist_df = pd.DataFrame()\n",
    "\n",
    "    margin_h = 0.004\n",
    "    margin_v = 0.004  # of a degree. 1 degree = 111000m\n",
    "    # 0.004 = 444m region\n",
    "    box ={}\n",
    "    # flight - index\n",
    "    # fdata - block's long and lat\n",
    "    for flight, fdata in flist.iterrows():\n",
    "        #print(f\"fdata is:\\n{fdata}\")\n",
    "        #print(f\"{fdata.shape}\")\n",
    "        print(f\"Working on {fdata['postal']}\")\n",
    "        long1 = fdata['lng_hdb']\n",
    "        lat1 = fdata['lat_hdb']\n",
    "        # Compare row-by-row with all bus stops:\n",
    "        print(type(long1),type(lat1))\n",
    "        box[flight]=[]\n",
    "        for row, busstop in overall.iterrows():\n",
    "            #print(busstop)\n",
    "            long2 = busstop['Longitude']\n",
    "            lat2 = busstop['Latitude']\n",
    "            #print(f\"Long2 is {long2}, Lat2 is {lat2}\")\n",
    "            #print(type(long2),type(lat2))\n",
    "            if abs(long2-long1) > margin_h:\n",
    "                continue\n",
    "            elif abs(lat2-lat1) > margin_v:\n",
    "                continue\n",
    "            else:\n",
    "                busstop['Distance']  = distance(long1,lat1,long2,lat2)\n",
    "                busstop['Postal'] = fdata['postal']\n",
    "                #print(f\"Bus stop {busstop['Description']}: {busstop['Distance']}m\")\n",
    "                box[flight].append(pd.DataFrame(busstop).T)\n",
    "                #index=[busstop['BusStopCode']\n",
    "        \n",
    "        print(\"Currently the list of bus stops are:\",box[flight])\n",
    "            #print(f\"Distance is {dist}m\")\n",
    "\n",
    "            #dist = math.sqrt(ellipdist(long1, lat1, long, lat)**2)\n",
    "            #rowdata.insert(loc=0, column='Distance (ft)', value=dist_ft)\n",
    "        for key, value in box.items():\n",
    "            #print(\"The value is\",value)\n",
    "            min_dist[key]= pd.concat(value,axis=0)\n",
    "            min_dist[key].dropna(inplace=True)\n",
    "            #min_dist[key]=min_dist[key].T\n",
    "            min_dist[key]['Distance'] = min_dist[key]['Distance'].astype(float)\n",
    "            print(f\"The keys are {min_dist[key].columns}\")\n",
    "            # Option 1: Keep those within 500m radius\n",
    "            min_dist[key]=min_dist[key][min_dist[key]['Distance'] <= 500]\n",
    "            \n",
    "            # Option 2: For the distance to 2 nearest bus stops\n",
    "            #min_dist[key] = min_dist[key].nsmallest(2,'Distance')\n",
    "            print(min_dist[key])\n",
    "    return min_dist\n",
    "        \n",
    "boxes = all_distance(blocks,overall)\n",
    "print(boxes)\n",
    "#col = pd.concat(boxes,axis=1)\n",
    "writer = pd.ExcelWriter('hdb_nearest_bus.xlsx', engine = 'openpyxl',mode='w')\n",
    "min_dist.to_excel(writer, sheet_name = 'Bus Stop')\n",
    "writer.close()"
    "#boxes = all_distance(blocks,overall)\n",
    "print(boxes.head(5))"

